<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="label1.Text" xml:space="preserve">
    <value>Справка по использованию программы:

Программа предназначена для работы с данными о товарах оптовой торговли. 
Вы можете загружать данные из таблицы, анализировать их и строить графики.

Основные возможности программы:
1. Просмотр данных о товарах в удобной таблице.
2. Построение графиков по выбранным параметрам, включая:
   - Количество товара на складе.
   - Количество товара в поставке.
3. Статистический анализ данных (например, расчет суммы, среднего значения).
4. Возможность редактирования, сортировки и фильтрации данных.
5. Сохранение и загрузка данных в формате CSV.

Как работать с программой:
1. Откройте приложение и загрузите данные в таблицу.
2. Выберите параметры графика в выпадающем списке.
3. Нажмите кнопку "Построить график" для визуализации данных.
4. Используйте кнопки редактирования и сортировки для управления данными.
5. Сохраните изменения в файл для дальнейшего использования.

Если у вас возникли вопросы или ошибки при работе с программой, обратитесь к разработчику.</value>
  </data>
  <data name="textBoxAdd.Text" xml:space="preserve">
    <value>Назначение: Добавление новой записи о товаре в таблицу.
Как использовать:
Нажмите кнопку "Добавить товар".
В появившемся окне введите данные (например, код товара, название, количество, цена, поставщик и срок поставки).
Нажмите "Сохранить", чтобы добавить запись в таблицу.

</value>
  </data>
  <data name="textBoxDelete.Text" xml:space="preserve">
    <value>Назначение: Удаление выбранной строки из таблицы.

Как использовать:
Выберите строку, которую хотите удалить.
Нажмите кнопку "Удалить".
Подтвердите удаление в появившемся диалоговом окне.
Примечания:
Если строка не выбрана, удаление будет недоступно.</value>
  </data>
  <data name="textBoxEdit.Text" xml:space="preserve">
    <value>Назначение: Изменение данных в таблице.
Как использовать:
Дважды щелкните на ячейку, которую хотите изменить.
Введите новое значение.
Нажмите Enter, чтобы сохранить изменения.
Примечания:
Редактирование доступно для всех столбцов.</value>
  </data>
  <data name="textBoxSearch.Text" xml:space="preserve">
    <value>Назначение: Быстрый поиск записей по определенным параметрам.
Как использовать:
Нажмите кнопку "Поиск".
В появившемся окне введите значение для поиска (например, код товара или название).
Нажмите "Найти", и программа выделит строки, соответствующие вашему запросу.
Примечания:
Если данные не найдены, будет отображено сообщение об отсутствии совпадений.</value>
  </data>
  <data name="textBoxSort.Text" xml:space="preserve">
    <value>Фильтрация
Назначение: Ограничение отображаемых записей на основе выбранных критериев.
Как использовать:
Нажмите кнопку "Фильтрация".
В окне фильтра выберите параметры (например, диапазон цен, количество или поставщика).
Нажмите "Применить фильтр".
В таблице останутся только строки, соответствующие заданным условиям.
Примечания:
Для отмены фильтрации нажмите "Сбросить фильтр".</value>
  </data>
  <data name="textBox1.Text" xml:space="preserve">
    <value>Построение графика
Назначение: Построение визуального графика на основе данных таблицы.
Как использовать:
Нажмите кнопку "График" на главном окне
Выберите параметры графика в выпадающем списке (например, "Количество на складе" или "Количество в поставке").
На графике отобразятся данные, соответствующие выбранным параметрам.
Примечания:
Для успешного построения графика данные в таблице должны быть корректно заполнены.

</value>
  </data>
</root>